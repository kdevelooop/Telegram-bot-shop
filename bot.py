import os
import logging
import asyncio
from aiogram import Bot, types, F
from aiogram.enums import ParseMode
from aiogram.filters import Command
from aiogram.types import (
    LabeledPrice, 
    FSInputFile, 
    InlineKeyboardButton, 
    InlineKeyboardMarkup,
    ReplyKeyboardMarkup,
    KeyboardButton,
    ReplyKeyboardRemove,
    PreCheckoutQuery
)
from aiogram import Dispatcher
from aiogram.client.default import DefaultBotProperties
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from aiogram.utils.keyboard import InlineKeyboardBuilder, ReplyKeyboardBuilder

# –ò–º–ø–æ—Ä—Ç –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
from config import (
    TOKEN, SUPPORT_USERNAME, ADMIN_IDS, conn, cursor, 
    products, get_stars_balance, get_purchases_count, 
    get_stats, update_stats, get_notifications_enabled, 
    set_notifications_enabled, load_products
)

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    level=logging.INFO,
    format="%(asctime)s - %(name)s - %(levelname)s - %(message)s"
)
logger = logging.getLogger(__name__)

bot = Bot(token=TOKEN, default=DefaultBotProperties(parse_mode=ParseMode.HTML))
dp = Dispatcher()

# –°–æ—Å—Ç–æ—è–Ω–∏—è –¥–ª—è FSM
class Form(StatesGroup):
    add_product_name = State()
    add_product_stars_price = State()
    add_product_desc = State()
    add_product_file = State()
    edit_product_select = State()
    edit_product_field = State()
    edit_product_value = State()
    delete_product_confirm = State()
    deposit_stars_amount = State()

# –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
def get_main_menu():
    builder = ReplyKeyboardBuilder()
    builder.add(
        KeyboardButton(text="üõç –ö–∞—Ç–∞–ª–æ–≥ —Ç–æ–≤–∞—Ä–æ–≤"),
        KeyboardButton(text="üë§ –õ–∏—á–Ω—ã–π –∫–∞–±–∏–Ω–µ—Ç"),
        KeyboardButton(text="üÜò –¢–µ—Ö–ø–æ–¥–¥–µ—Ä–∂–∫–∞")
    )
    builder.adjust(2)
    return builder.as_markup(resize_keyboard=True)

# –ê–¥–º–∏–Ω –º–µ–Ω—é
def get_admin_menu():
    builder = ReplyKeyboardBuilder()
    builder.add(
        KeyboardButton(text="üì¶ –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞–º–∏"),
        KeyboardButton(text="üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞"),
        KeyboardButton(text="üì© –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è"),
        KeyboardButton(text="üîô –í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é")
    )
    builder.adjust(1)
    return builder.as_markup(resize_keyboard=True)

# –ú–µ–Ω—é —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
def get_notifications_menu(user_id):
    enabled_purchase = get_notifications_enabled(user_id) & 1  # –ü–æ–∫—É–ø–∫–∏
    enabled_deposit = (get_notifications_enabled(user_id) >> 1) & 1  # –ü–æ–ø–æ–ª–Ω–µ–Ω–∏—è
    builder = InlineKeyboardBuilder()
    builder.add(
        InlineKeyboardButton(
            text=f"üîî –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –ø–æ–∫—É–ø–∫–µ {'–≤–∫–ª—é—á–µ–Ω—ã' if enabled_purchase else '–≤—ã–∫–ª—é—á–µ–Ω—ã'}",
            callback_data="toggle_purchase_notifications"
        ),
        InlineKeyboardButton(
            text=f"üîî –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ–± –æ–ø–ª–∞—Ç–µ {'–≤–∫–ª—é—á–µ–Ω—ã' if enabled_deposit else '–≤—ã–∫–ª—é—á–µ–Ω—ã'}",
            callback_data="toggle_deposit_notifications"
        ),
        InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="back_to_admin")
    )
    builder.adjust(1)
    return builder.as_markup()

# –ú–µ–Ω—é —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Ç–æ–≤–∞—Ä–∞–º–∏
def get_products_menu():
    builder = InlineKeyboardBuilder()
    builder.add(
        InlineKeyboardButton(text="‚ûï –î–æ–±–∞–≤–∏—Ç—å —Ç–æ–≤–∞—Ä", callback_data="add_product"),
        InlineKeyboardButton(text="‚úèÔ∏è –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å —Ç–æ–≤–∞—Ä", callback_data="edit_product"),
        InlineKeyboardButton(text="üóë –£–¥–∞–ª–∏—Ç—å —Ç–æ–≤–∞—Ä", callback_data="delete_product"),
        InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="back_to_admin")
    )
    builder.adjust(1)
    return builder.as_markup()

# –ö–æ–º–∞–Ω–¥–∞ /start
@dp.message(Command("start"))
async def start(message: types.Message):
    user_id = message.from_user.id
    
    cursor.execute("INSERT OR IGNORE INTO users (user_id) VALUES (?)", (user_id,))
    conn.commit()
    update_stats()  # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø—Ä–∏ –ø–µ—Ä–≤–æ–º –≤—Ö–æ–¥–µ
    
    if user_id in ADMIN_IDS:
        await message.answer("üëã –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å!", reply_markup=get_admin_menu())
        return
    
    stars_balance = get_stars_balance(user_id)
    text = (
        "üõí –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –º–∞–≥–∞–∑–∏–Ω —Ü–∏—Ñ—Ä–æ–≤—ã—Ö —Ç–æ–≤–∞—Ä–æ–≤!\n"
        f"‚≠ê –í–∞—à–∏ –∑–≤–µ–∑–¥—ã: {stars_balance}\n\n"
        "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏ –Ω–∏–∂–µ –¥–ª—è –Ω–∞–≤–∏–≥–∞—Ü–∏–∏:"
    )
    
    await message.answer(text, reply_markup=get_main_menu())

# –ö–æ–º–∞–Ω–¥–∞ /givestars
@dp.message(Command("givestars"))
async def give_stars(message: types.Message):
    if message.from_user.id not in ADMIN_IDS:
        await message.answer("‚õî –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥–µ.")
        return
    
    try:
        parts = message.text.split()
        if len(parts) != 3:
            await message.answer("‚ùå –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /givestars <user_id> –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ (–Ω–∞–ø—Ä–∏–º–µ—Ä, /givestars 123456789 100)")
            return
        
        user_id = parts[1]
        amount = int(parts[2])
        
        if amount <= 0:
            await message.answer("‚ùå –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–≤—ë–∑–¥ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –±–æ–ª—å—à–µ 0.")
            return
        
        try:
            user_id = int(user_id)
        except ValueError:
            await message.answer("‚ùå User ID –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —Ü–µ–ª—ã–º —á–∏—Å–ª–æ–º. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /givestars <user_id> –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ.")
            return
        
        cursor.execute("INSERT OR IGNORE INTO users (user_id) VALUES (?)", (user_id,))
        cursor.execute("UPDATE users SET stars_balance = stars_balance + ? WHERE user_id=?", (amount, user_id))
        conn.commit()
        
        await bot.send_message(
            chat_id=user_id,
            text=f"üéÅ –í–∞–º –Ω–∞—á–∏—Å–ª–µ–Ω–æ {amount} ‚≠ê –≤ –ø–æ–¥–∞—Ä–æ–∫! –ù–æ–≤—ã–π –±–∞–ª–∞–Ω—Å: {get_stars_balance(user_id)}"
        )
        
        await message.answer(f"‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é —Å ID {user_id} –≤—ã–¥–∞–Ω–æ {amount} –∑–≤–µ–∑–¥. –ù–æ–≤—ã–π –±–∞–ª–∞–Ω—Å: {get_stars_balance(user_id)}")
    except ValueError:
        await message.answer("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞. –í–≤–µ–¥–∏—Ç–µ —Ü–µ–ª–æ–µ —á–∏—Å–ª–æ.")
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–¥–∞—á–µ –∑–≤–µ–∑–¥: {e}")
        await message.answer("‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ —Ñ–æ—Ä–º–∞—Ç –∫–æ–º–∞–Ω–¥—ã –∏–ª–∏ –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É.")

# –ö–æ–º–∞–Ω–¥–∞ /starsdelete
@dp.message(Command("starsdelete"))
async def delete_stars(message: types.Message):
    if message.from_user.id not in ADMIN_IDS:
        await message.answer("‚õî –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥–µ.")
        return
    
    try:
        parts = message.text.split()
        if len(parts) != 3:
            await message.answer("‚ùå –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /starsdelete <user_id> –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ (–Ω–∞–ø—Ä–∏–º–µ—Ä, /starsdelete 123456789 100)")
            return
        
        user_id = parts[1]
        amount = int(parts[2])
        
        if amount <= 0:
            await message.answer("‚ùå –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–≤—ë–∑–¥ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –±–æ–ª—å—à–µ 0.")
            return
        
        try:
            user_id = int(user_id)
        except ValueError:
            await message.answer("‚ùå User ID –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —Ü–µ–ª—ã–º —á–∏—Å–ª–æ–º. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /starsdelete <user_id> –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ.")
            return
        
        current_balance = get_stars_balance(user_id)
        if current_balance < amount:
            await message.answer(f"‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –∑–≤–µ–∑–¥ —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è. –¢–µ–∫—É—â–∏–π –±–∞–ª–∞–Ω—Å: {current_balance}")
            return
        
        cursor.execute("UPDATE users SET stars_balance = stars_balance - ? WHERE user_id=?", (amount, user_id))
        conn.commit()
        
        await message.answer(f"‚úÖ –£ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å ID {user_id} —Å–ø–∏—Å–∞–Ω–æ {amount} –∑–≤–µ–∑–¥. –ù–æ–≤—ã–π –±–∞–ª–∞–Ω—Å: {get_stars_balance(user_id)}")
    except ValueError:
        await message.answer("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞. –í–≤–µ–¥–∏—Ç–µ —Ü–µ–ª–æ–µ —á–∏—Å–ª–æ.")
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–ø–∏—Å–∞–Ω–∏–∏ –∑–≤–µ–∑–¥: {e}")
        await message.answer("‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ —Ñ–æ—Ä–º–∞—Ç –∫–æ–º–∞–Ω–¥—ã –∏–ª–∏ –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É.")

# –ê–¥–º–∏–Ω –ø–∞–Ω–µ–ª—å
@dp.message(F.text == "üì¶ –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞–º–∏")
async def manage_products(message: types.Message):
    if message.from_user.id not in ADMIN_IDS:
        await message.answer("‚õî –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥–µ.")
        return
    
    await message.answer("üì¶ –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞–º–∏:", reply_markup=get_products_menu())

# –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
@dp.message(F.text == "üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞")
async def show_stats(message: types.Message):
    if message.from_user.id not in ADMIN_IDS:
        await message.answer("‚õî –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥–µ.")
        return
    
    update_stats()
    total_purchases, total_stars_deposited, total_users = get_stats()
    text = (
        "üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:\n"
        f"üõç –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–∫—É–ø–æ–∫: {total_purchases}\n"
        f"‚≠ê –í—Å–µ–≥–æ –ø–æ–ø–æ–ª–Ω–µ–Ω–æ –∑–≤—ë–∑–¥: {total_stars_deposited}\n"
        f"üë• –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {total_users}"
    )
    await message.answer(text, reply_markup=get_admin_menu())

# –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
@dp.message(F.text == "üì© –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è")
async def manage_notifications(message: types.Message):
    if message.from_user.id not in ADMIN_IDS:
        await message.answer("‚õî –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥–µ.")
        return
    
    await message.answer("üì© –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π:", reply_markup=get_notifications_menu(message.from_user.id))

@dp.callback_query(F.data.in_(["toggle_purchase_notifications", "toggle_deposit_notifications"]))
async def toggle_notifications(callback: types.CallbackQuery):
    user_id = callback.from_user.id
    current_state = get_notifications_enabled(user_id)
    if callback.data == "toggle_purchase_notifications":
        new_state = current_state ^ 1  # –ò–Ω–≤–µ—Ä—Å–∏—è –±–∏—Ç–∞ –¥–ª—è –ø–æ–∫—É–ø–æ–∫
    else:  # toggle_deposit_notifications
        new_state = current_state ^ 2  # –ò–Ω–≤–µ—Ä—Å–∏—è –±–∏—Ç–∞ –¥–ª—è –ø–æ–ø–æ–ª–Ω–µ–Ω–∏–π
    set_notifications_enabled(user_id, new_state)
    await callback.message.edit_text(
        "üì© –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π:",
        reply_markup=get_notifications_menu(user_id)
    )
    await callback.answer()

# –î–æ–±–∞–≤–ª–µ–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞
@dp.callback_query(F.data == "add_product")
async def add_product_start(callback: types.CallbackQuery, state: FSMContext):
    if callback.from_user.id not in ADMIN_IDS:
        await callback.answer("‚õî –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞.")
        return
    
    await callback.message.answer("–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞:")
    await state.set_state(Form.add_product_name)
    await callback.answer()

@dp.message(Form.add_product_name)
async def add_product_name(message: types.Message, state: FSMContext):
    await state.update_data(name=message.text)
    await message.answer("–í–≤–µ–¥–∏—Ç–µ —Ü–µ–Ω—É —Ç–æ–≤–∞—Ä–∞ –≤ –∑–≤–µ–∑–¥–∞—Ö (–Ω–∞–ø—Ä–∏–º–µ—Ä: 1000):")
    await state.set_state(Form.add_product_stars_price)

@dp.message(Form.add_product_stars_price)
async def add_product_stars_price(message: types.Message, state: FSMContext):
    try:
        stars_price = int(message.text)
        if stars_price <= 0:
            await message.answer("‚ùå –¶–µ–Ω–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –±–æ–ª—å—à–µ 0")
            return
            
        await state.update_data(stars_price=stars_price)
        await message.answer("–í–≤–µ–¥–∏—Ç–µ –æ–ø–∏—Å–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞:")
        await state.set_state(Form.add_product_desc)
    except ValueError:
        await message.answer("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç —Ü–µ–Ω—ã. –í–≤–µ–¥–∏—Ç–µ —Ü–µ–ª–æ–µ —á–∏—Å–ª–æ, –Ω–∞–ø—Ä–∏–º–µ—Ä: 1000")

@dp.message(Form.add_product_desc)
async def add_product_desc(message: types.Message, state: FSMContext):
    await state.update_data(desc=message.text)
    await message.answer("–û—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–∞–π–ª –¥–ª—è —Ç–æ–≤–∞—Ä–∞ (–¥–æ–∫—É–º–µ–Ω—Ç, –∞—Ä—Ö–∏–≤ –∏ —Ç.–¥.):")
    await state.set_state(Form.add_product_file)

@dp.message(Form.add_product_file, F.document)
async def add_product_file(message: types.Message, state: FSMContext):
    data = await state.get_data()
    
    if not os.path.exists("products_files"):
        os.makedirs("products_files")
    
    file_id = message.document.file_id
    file = await bot.get_file(file_id)
    file_path = f"products_files/{file_id}_{message.document.file_name}"
    await bot.download_file(file.file_path, file_path)
    
    cursor.execute("SELECT MAX(id) FROM products")
    max_id = cursor.fetchone()[0] or 0
    new_id = max_id + 1
    
    cursor.execute(
        "INSERT INTO products (id, name, stars_price, desc, file_path) VALUES (?, ?, ?, ?, ?)",
        (new_id, data['name'], data['stars_price'], data['desc'], file_path)
    )
    conn.commit()
    
    global products
    products = load_products()
    
    await message.answer(f"‚úÖ –¢–æ–≤–∞—Ä \"{data['name']}\" —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω!", reply_markup=get_admin_menu())
    await state.clear()

# –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞
@dp.callback_query(F.data == "edit_product")
async def edit_product_start(callback: types.CallbackQuery, state: FSMContext):
    if callback.from_user.id not in ADMIN_IDS:
        await callback.answer("‚õî –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞.")
        return
    
    if not products:
        await callback.message.answer("‚ùå –ù–µ—Ç —Ç–æ–≤–∞—Ä–æ–≤ –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è.")
        await callback.answer()
        return
    
    builder = InlineKeyboardBuilder()
    for id, product in products.items():
        builder.add(InlineKeyboardButton(
            text=f"{product['name']} - {product['stars_price']}‚≠ê", 
            callback_data=f"edit_select_{id}"
        ))
    builder.adjust(1)
    
    await callback.message.edit_text(
        "–í—ã–±–µ—Ä–∏—Ç–µ —Ç–æ–≤–∞—Ä –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è:",
        reply_markup=builder.as_markup()
    )
    await callback.answer()

@dp.callback_query(F.data.startswith("edit_select_"))
async def edit_product_select(callback: types.CallbackQuery, state: FSMContext):
    product_id = int(callback.data.split("_")[2])
    await state.update_data(product_id=product_id)
    
    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="‚úèÔ∏è –ù–∞–∑–≤–∞–Ω–∏–µ", callback_data="edit_field_name")],
        [InlineKeyboardButton(text="‚≠ê –¶–µ–Ω–∞", callback_data="edit_field_stars_price")],
        [InlineKeyboardButton(text="üìù –û–ø–∏—Å–∞–Ω–∏–µ", callback_data="edit_field_desc")],
        [InlineKeyboardButton(text="üìÅ –§–∞–π–ª", callback_data="edit_field_file")],
        [InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="edit_product")]
    ])
    
    await callback.message.edit_text(
        "–í—ã–±–µ—Ä–∏—Ç–µ —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ –∏–∑–º–µ–Ω–∏—Ç—å:",
        reply_markup=keyboard
    )
    await callback.answer()

@dp.callback_query(F.data.startswith("edit_field_"))
async def edit_product_field(callback: types.CallbackQuery, state: FSMContext):
    field = callback.data.replace("edit_field_", "")  # –£–ø—Ä–æ—â–∞–µ–º –∏–∑–≤–ª–µ—á–µ–Ω–∏–µ –ø–æ–ª—è
    logger.debug(f"–ü–æ–ª—É—á–µ–Ω–æ callback_data: {callback.data}, –∏–∑–≤–ª–µ—á–µ–Ω–æ –ø–æ–ª–µ: {field}")
    valid_fields = {"name": "–ù–∞–∑–≤–∞–Ω–∏–µ", "stars_price": "–¶–µ–Ω–∞", "desc": "–û–ø–∏—Å–∞–Ω–∏–µ", "file": "–§–∞–π–ª"}
    
    if field not in valid_fields:
        logger.error(f"–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –ø–æ–ª–µ –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è: {field} (callback_data: {callback.data})")
        await callback.answer("‚ùå –ù–µ–≤–µ—Ä–Ω–æ–µ –ø–æ–ª–µ –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è. –û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É.")
        return
    
    await state.update_data(field=field)
    
    if field == "file":
        await callback.message.answer("–û—Ç–ø—Ä–∞–≤—å—Ç–µ –Ω–æ–≤—ã–π —Ñ–∞–π–ª –¥–ª—è —Ç–æ–≤–∞—Ä–∞:")
    else:
        await callback.message.answer(f"–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –¥–ª—è {valid_fields[field]}:")
    
    await state.set_state(Form.edit_product_value)
    await callback.answer()

@dp.message(Form.edit_product_value)
async def edit_product_value(message: types.Message, state: FSMContext):
    data = await state.get_data()
    product_id = data.get('product_id')
    
    if not product_id:
        await message.answer("‚ùå –û—à–∏–±–∫–∞: ID —Ç–æ–≤–∞—Ä–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω. –í–µ—Ä–Ω–∏—Ç–µ—Å—å –≤ –º–µ–Ω—é —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Ç–æ–≤–∞—Ä–∞–º–∏.")
        await state.clear()
        return
    
    field = data.get('field')
    
    if field == "file":
        if not message.document:
            await message.answer("‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–∞–π–ª.")
            return
            
        cursor.execute("SELECT file_path FROM products WHERE id=?", (product_id,))
        old_file_path = cursor.fetchone()[0]
        
        if os.path.exists(old_file_path):
            try:
                os.remove(old_file_path)
            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è —Ñ–∞–π–ª–∞: {e}")
        
        file_id = message.document.file_id
        file = await bot.get_file(file_id)
        new_file_path = f"products_files/{file_id}_{message.document.file_name}"
        await bot.download_file(file.file_path, new_file_path)
        
        cursor.execute(
            "UPDATE products SET file_path=? WHERE id=?",
            (new_file_path, product_id)
        )
    else:
        if field == "stars_price":
            try:
                value = int(message.text)
                if value <= 0:
                    await message.answer("‚ùå –¶–µ–Ω–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –±–æ–ª—å—à–µ 0")
                    return
            except ValueError:
                await message.answer("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç —Ü–µ–Ω—ã. –í–≤–µ–¥–∏—Ç–µ —Ü–µ–ª–æ–µ —á–∏—Å–ª–æ, –Ω–∞–ø—Ä–∏–º–µ—Ä: 1000")
                return
        else:
            value = message.text
        
        cursor.execute(
            f"UPDATE products SET {field}=? WHERE id=?",
            (value, product_id)
        )
    
    conn.commit()
    global products
    products = load_products()
    
    await message.answer("‚úÖ –¢–æ–≤–∞—Ä —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω!", reply_markup=get_admin_menu())
    await state.clear()

# –£–¥–∞–ª–µ–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞
@dp.callback_query(F.data == "delete_product")
async def delete_product_start(callback: types.CallbackQuery, state: FSMContext):
    if callback.from_user.id not in ADMIN_IDS:
        await callback.answer("‚õî –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞.")
        return
    
    if not products:
        await callback.message.answer("‚ùå –ù–µ—Ç —Ç–æ–≤–∞—Ä–æ–≤ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è.")
        await callback.answer()
        return
    
    builder = InlineKeyboardBuilder()
    for id, product in products.items():
        builder.add(InlineKeyboardButton(
            text=f"{product['name']} - {product['stars_price']}‚≠ê", 
            callback_data=f"delete_select_{id}"
        ))
    builder.adjust(1)
    
    await callback.message.edit_text(
        "–í—ã–±–µ—Ä–∏—Ç–µ —Ç–æ–≤–∞—Ä –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è:",
        reply_markup=builder.as_markup()
    )
    await callback.answer()

@dp.callback_query(F.data.startswith("delete_select_"))
async def delete_product_select(callback: types.CallbackQuery, state: FSMContext):
    product_id = int(callback.data.split("_")[2])
    product = products[product_id]
    
    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="‚úÖ –î–∞, —É–¥–∞–ª–∏—Ç—å", callback_data=f"delete_confirm_{product_id}")],
        [InlineKeyboardButton(text="‚ùå –ù–µ—Ç, –æ—Ç–º–µ–Ω–∞", callback_data="delete_product")]
    ])
    
    await callback.message.edit_text(
        f"–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å —Ç–æ–≤–∞—Ä:\n\n"
        f"{product['name']} - {product['stars_price']}‚≠ê\n\n"
        f"–≠—Ç–æ –¥–µ–π—Å—Ç–≤–∏–µ –Ω–µ–ª—å–∑—è –æ—Ç–º–µ–Ω–∏—Ç—å!",
        reply_markup=keyboard
    )
    await callback.answer()

@dp.callback_query(F.data.startswith("delete_confirm_"))
async def delete_product_confirm(callback: types.CallbackQuery):
    global products
    
    try:
        product_id = int(callback.data.split("_")[2])
        product = products[product_id]
        
        if os.path.exists(product['file_path']):
            os.remove(product['file_path'])
        
        cursor.execute("DELETE FROM products WHERE id=?", (product_id,))
        conn.commit()
        
        products = load_products()
        
        await callback.message.edit_text(
            f"‚úÖ –¢–æ–≤–∞—Ä \"{product['name']}\" —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω!",
            reply_markup=get_admin_menu()
        )
        await callback.answer()
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ —Ç–æ–≤–∞—Ä–∞: {e}")
        await callback.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ —Ç–æ–≤–∞—Ä–∞!")

# –ö–∞—Ç–∞–ª–æ–≥ —Ç–æ–≤–∞—Ä–æ–≤
@dp.message(F.text == "üõç –ö–∞—Ç–∞–ª–æ–≥ —Ç–æ–≤–∞—Ä–æ–≤")
@dp.message(Command("shop"))
async def shop(message: types.Message):
    if not products:
        await message.answer("üì≠ –í –º–∞–≥–∞–∑–∏–Ω–µ –ø–æ–∫–∞ –Ω–µ—Ç —Ç–æ–≤–∞—Ä–æ–≤.")
        return
    
    builder = InlineKeyboardBuilder()
    for id, product in products.items():
        builder.add(InlineKeyboardButton(
            text=f"{product['name']} - {product['stars_price']}‚≠ê", 
            callback_data=f"view_{id}"
        ))
    builder.adjust(1)
    
    await message.answer(
        "üìö –ö–∞—Ç–∞–ª–æ–≥ —Ç–æ–≤–∞—Ä–æ–≤:",
        reply_markup=builder.as_markup()
    )

# –ü—Ä–æ—Å–º–æ—Ç—Ä —Ç–æ–≤–∞—Ä–∞
@dp.callback_query(F.data.startswith("view_"))
async def view_product(callback: types.CallbackQuery):
    product_id = int(callback.data.split("_")[1])
    product = products.get(product_id)
    user_id = callback.from_user.id
    
    if not product:
        await callback.answer("‚ùå –¢–æ–≤–∞—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω!")
        return
    
    stars_balance = get_stars_balance(user_id)
    
    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="‚≠ê –ö—É–ø–∏—Ç—å", callback_data=f"buy_{product_id}")],
        [InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="back_to_shop")]
    ])
    
    await callback.message.edit_text(
        f"<b>{product['name']}</b>\n\n"
        f"{product['desc']}\n\n"
        f"‚≠ê –¶–µ–Ω–∞: <b>{product['stars_price']}</b>\n"
        f"üÜî ID —Ç–æ–≤–∞—Ä–∞: <code>{product_id}</code>\n\n"
        f"–í–∞—à–∏ –∑–≤–µ–∑–¥—ã: {stars_balance}",
        reply_markup=keyboard
    )
    await callback.answer()

# –ü–æ–∫—É–ø–∫–∞ —Ç–æ–≤–∞—Ä–∞
@dp.callback_query(F.data.startswith("buy_"))
async def buy_product(callback: types.CallbackQuery):
    product_id = int(callback.data.split("_")[1])
    product = products.get(product_id)
    user_id = callback.from_user.id
    
    if not product:
        await callback.answer("‚ùå –¢–æ–≤–∞—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω!")
        return
        
    stars_balance = get_stars_balance(user_id)
    stars_price = product['stars_price']
    
    if stars_balance >= stars_price:
        keyboard = InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å", callback_data=f"confirm_{product_id}")],
            [InlineKeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∏—Ç—å", callback_data=f"view_{product_id}")]
        ])
        
        await callback.message.edit_text(
            f"‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –ø–æ–∫—É–ø–∫–∏\n\n"
            f"–¢–æ–≤–∞—Ä: {product['name']}\n"
            f"–¶–µ–Ω–∞: {stars_price}‚≠ê\n\n"
            f"–í–∞—à–∏ –∑–≤–µ–∑–¥—ã: {stars_balance}\n"
            f"–û—Å—Ç–∞–Ω–µ—Ç—Å—è: {stars_balance - stars_price}‚≠ê",
            reply_markup=keyboard
        )
        await callback.answer()
    else:
        await callback.answer(
            f"‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –∑–≤–µ–∑–¥. –ù—É–∂–Ω–æ {stars_price}", 
            show_alert=True
        )

# –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –ø–æ–∫—É–ø–∫–∏
@dp.callback_query(F.data.startswith("confirm_"))
async def confirm_purchase(callback: types.CallbackQuery):
    product_id = int(callback.data.split("_")[1])
    product = products.get(product_id)
    user_id = callback.from_user.id
    
    if not product:
        await callback.answer("‚ùå –¢–æ–≤–∞—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω!")
        return
        
    stars_price = product['stars_price']
    
    cursor.execute("UPDATE users SET stars_balance = stars_balance - ? WHERE user_id=?", 
                  (stars_price, user_id))
    cursor.execute("INSERT INTO purchases (user_id, product_id) VALUES (?, ?)", 
                  (user_id, product_id))
    conn.commit()
    update_stats()  # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
    
    # –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∞–¥–º–∏–Ω—É —Å –æ–±—Ä–∞–±–æ—Ç–∫–æ–π –æ—à–∏–±–æ–∫
    try:
        if get_notifications_enabled(ADMIN_IDS[0]):
            username = callback.from_user.username or str(user_id)
            new_balance = get_stars_balance(user_id)
            await bot.send_message(
                ADMIN_IDS[0],
                f"üîî –ù–æ–≤–∞—è –ø–æ–∫—É–ø–∫–∞\n"
                f"üÜî ID: {user_id}\n"
                f"@{username} –æ–ø–ª–∞—Ç–∏–ª —Ç–æ–≤–∞—Ä {product['name']}\n"
                f"üí∞ –°—É–º–º–∞ –ø–æ–∫—É–ø–∫–∏: {stars_price} –∑–≤–µ–∑–¥\n"
                f"üí∏ –û—Å—Ç–∞—Ç–æ–∫ –µ–≥–æ –±–∞–ª–∞–Ω—Å–∞: {new_balance}"
            )
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –∞–¥–º–∏–Ω—É: {e}")
    
    try:
        file = FSInputFile(product['file_path'])
        await bot.send_document(
            chat_id=user_id,
            document=file,
            caption=(
                f"‚úÖ –°–ø–∞—Å–∏–±–æ –∑–∞ –ø–æ–∫—É–ø–∫—É! –¢–æ–≤–∞—Ä <b>{product['name']}</b> –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω.\n"
                f"‚≠ê –û—Å—Ç–∞—Ç–æ–∫: {get_stars_balance(user_id)}"
            )
        )
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Ñ–∞–π–ª–∞: {e}")
        await bot.send_message(
            chat_id=user_id,
            text=(
                f"‚úÖ –ü–æ–∫—É–ø–∫–∞ <b>{product['name']}</b> –∑–∞ {stars_price}‚≠ê –∑–∞–≤–µ—Ä—à–µ–Ω–∞!\n"
                f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Ñ–∞–π–ª–∞. –û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É."
            )
        )
    
    await callback.message.edit_text(
        f"‚úÖ –ü–æ–∫—É–ø–∫–∞ <b>{product['name']}</b> –∑–∞ {stars_price}‚≠ê –∑–∞–≤–µ—Ä—à–µ–Ω–∞!",
        reply_markup=InlineKeyboardMarkup(
            inline_keyboard=[
                [InlineKeyboardButton(text="üõç –ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å", callback_data="back_to_shop")]
            ]
        )
    )
    await callback.answer()

# –í–æ–∑–≤—Ä–∞—Ç –≤ –∫–∞—Ç–∞–ª–æ–≥
@dp.callback_query(F.data == "back_to_shop")
async def back_to_shop(callback: types.CallbackQuery):
    if not products:
        await callback.message.edit_text("üì≠ –í –º–∞–≥–∞–∑–∏–Ω–µ –ø–æ–∫–∞ –Ω–µ—Ç —Ç–æ–≤–∞—Ä–æ–≤.")
        return
    
    builder = InlineKeyboardBuilder()
    for id, product in products.items():
        builder.add(InlineKeyboardButton(
            text=f"{product['name']} - {product['stars_price']}‚≠ê", 
            callback_data=f"view_{id}"
        ))
    builder.adjust(1)
    
    await callback.message.edit_text(
        "üìö –ö–∞—Ç–∞–ª–æ–≥ —Ç–æ–≤–∞—Ä–æ–≤:",
        reply_markup=builder.as_markup()
    )
    await callback.answer()

# –õ–∏—á–Ω—ã–π –∫–∞–±–∏–Ω–µ—Ç
@dp.message(F.text == "üë§ –õ–∏—á–Ω—ã–π –∫–∞–±–∏–Ω–µ—Ç")
async def profile(message: types.Message):
    user_id = message.from_user.id
    stars_balance = get_stars_balance(user_id)
    purchases = get_purchases_count(user_id)
    
    text = (
        "üë§ –õ–∏—á–Ω—ã–π –∫–∞–±–∏–Ω–µ—Ç\n"
        f"üÜî ID: {user_id}\n"
        f"‚≠ê –ó–≤–µ–∑–¥—ã: <b>{stars_balance}</b>\n"
        f"üõç –ö—É–ø–ª–µ–Ω–æ —Ç–æ–≤–∞—Ä–æ–≤: {purchases}"
    )
    
    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="üõí –ò—Å—Ç–æ—Ä–∏—è –ø–æ–∫—É–ø–æ–∫", callback_data="purchase_history")],
        [InlineKeyboardButton(text="üìà –ò—Å—Ç–æ—Ä–∏—è –ø–æ–ø–æ–ª–Ω–µ–Ω–∏–π", callback_data="deposit_history")],
        [InlineKeyboardButton(text="‚≠ê –ü–æ–ø–æ–ª–Ω–∏—Ç—å", callback_data="deposit_stars")],
        [InlineKeyboardButton(text="üÜò –¢–µ—Ö–ø–æ–¥–¥–µ—Ä–∂–∫–∞", url=f"https://t.me/{SUPPORT_USERNAME[1:]}")],
        [InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="back_to_main")]
    ])
    
    await message.answer(text, reply_markup=keyboard)

# –ü–æ–ø–æ–ª–Ω–µ–Ω–∏–µ –∑–≤–µ–∑–¥–∞–º–∏
@dp.callback_query(F.data == "deposit_stars")
async def deposit_stars(callback: types.CallbackQuery, state: FSMContext):
    await callback.message.answer(
        "–í–≤–µ–¥–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–≤–µ–∑–¥ –¥–ª—è –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è (–º–∏–Ω. 10):",
        reply_markup=ReplyKeyboardRemove()
    )
    await state.set_state(Form.deposit_stars_amount)
    await callback.answer()

@dp.message(Form.deposit_stars_amount)
async def process_deposit_amount(message: types.Message, state: FSMContext):
    try:
        amount = int(message.text)
        if amount < 10:
            await message.answer("‚ùå –ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è —Å—É–º–º–∞ –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è - 10 –∑–≤–µ–∑–¥")
            return
            
        await create_stars_invoice(message.from_user.id, amount, "–ü–æ–ø–æ–ª–Ω–µ–Ω–∏–µ –∑–≤–µ–∑–¥–∞–º–∏")
        await state.clear()
        await message.answer("–û–∂–∏–¥–∞–π—Ç–µ –∏–Ω–≤–æ–π—Å –¥–ª—è –æ–ø–ª–∞—Ç—ã...", reply_markup=get_main_menu())
    except ValueError:
        await message.answer("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç. –í–≤–µ–¥–∏—Ç–µ —Ü–µ–ª–æ–µ —á–∏—Å–ª–æ, –Ω–∞–ø—Ä–∏–º–µ—Ä: 50")

async def create_stars_invoice(user_id: int, amount: int, description: str):
    await bot.send_invoice(
        chat_id=user_id,
        title=description,
        description=f"–ü–æ–ø–æ–ª–Ω–µ–Ω–∏–µ –Ω–∞ {amount} –∑–≤–µ–∑–¥",
        provider_token="",  # –ü—É—Å—Ç–æ–π provider_token –¥–ª—è Telegram Stars
        currency="XTR",
        prices=[LabeledPrice(label="–ó–≤–µ–∑–¥—ã", amount=amount)],
        payload=f"stars_deposit_{user_id}_{amount}",
        need_email=False,
        need_phone_number=False,
        need_shipping_address=False,
        is_flexible=False,
        max_tip_amount=0
    )

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –ø—Ä–µ–¥–ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–ª–∞—Ç–µ–∂–∞
@dp.pre_checkout_query()
async def process_pre_checkout_query(pre_checkout_query: PreCheckoutQuery):
    await pre_checkout_query.answer(ok=True)

# –û–±—Ä–∞–±–æ—Ç–∫–∞ —É—Å–ø–µ—à–Ω–æ–≥–æ –ø–ª–∞—Ç–µ–∂–∞
@dp.message(F.successful_payment)
async def successful_payment_handler(message: types.Message):
    try:
        payload = message.successful_payment.invoice_payload
        if payload.startswith("stars_deposit_"):
            parts = payload.split("_")
            user_id = int(parts[2])
            amount_stars = int(parts[3])
            
            cursor.execute("INSERT OR IGNORE INTO users (user_id) VALUES (?)", (user_id,))
            cursor.execute("UPDATE users SET stars_balance = stars_balance + ? WHERE user_id=?", 
                          (amount_stars, user_id))
            cursor.execute("INSERT INTO deposits (user_id, amount_stars) VALUES (?, ?)", 
                          (user_id, amount_stars))
            conn.commit()
            update_stats()  # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
            
            # –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∞–¥–º–∏–Ω—É —Å –æ–±—Ä–∞–±–æ—Ç–∫–æ–π –æ—à–∏–±–æ–∫
            try:
                if get_notifications_enabled(ADMIN_IDS[0]):
                    username = message.from_user.username or str(user_id)
                    new_balance = get_stars_balance(user_id)
                    await bot.send_message(
                        ADMIN_IDS[0],
                        f"üîî –ü–æ–ø–æ–ª–Ω–µ–Ω–∏–µ –±–∞–ª–∞–Ω—Å–∞\n"
                        f"üÜî ID: {user_id}\n"
                        f"@{username} –ø–æ–ø–æ–ª–Ω–∏–ª —Å–≤–æ–π –±–∞–ª–∞–Ω—Å –Ω–∞ {amount_stars} –∑–≤–µ–∑–¥\n"
                        f"üí∞ –ï–≥–æ –±–∞–ª–∞–Ω—Å: {new_balance}"
                    )
            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –∞–¥–º–∏–Ω—É: {e}")
            
            await message.answer(
                f"‚úÖ –ë–∞–ª–∞–Ω—Å –ø–æ–ø–æ–ª–Ω–µ–Ω –Ω–∞ {amount_stars} –∑–≤–µ–∑–¥!\n"
                f"‚≠ê –¢–µ–∫—É—â–∏–π –±–∞–ª–∞–Ω—Å: {get_stars_balance(user_id)}",
                reply_markup=get_main_menu()
            )
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –ø–ª–∞—Ç–µ–∂–∞: {e}")
        await message.answer("‚ö†Ô∏è –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –ø–ª–∞—Ç–µ–∂–∞. –û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É.", reply_markup=get_main_menu())

# –ò—Å—Ç–æ—Ä–∏—è –ø–æ–∫—É–ø–æ–∫
@dp.callback_query(F.data == "purchase_history")
async def purchase_history(callback: types.CallbackQuery):
    user_id = callback.from_user.id
    
    cursor.execute("""
        SELECT 
            p.id,
            p.product_id,
            strftime('%d.%m.%Y %H:%M', p.date, 'localtime') as date,
            COALESCE(pr.name, '–£–¥–∞–ª—ë–Ω–Ω—ã–π —Ç–æ–≤–∞—Ä') as name,
            COALESCE(pr.stars_price, 0) as price
        FROM purchases p
        LEFT JOIN products pr ON p.product_id = pr.id
        WHERE p.user_id = ?
        ORDER BY p.date DESC
        LIMIT 10
    """, (user_id,))
    
    purchases = cursor.fetchall()
    
    if not purchases:
        text = "üì≠ –£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –ø–æ–∫—É–ø–æ–∫."
    else:
        text = "üõí –ò—Å—Ç–æ—Ä–∏—è –ø–æ–∫—É–ø–æ–∫:\n\n"
        for i, purchase in enumerate(purchases, 1):
            text += (
                f"{i}. {purchase[3]}\n"
                f"   üí´ –¶–µ–Ω–∞: {purchase[4]}‚≠ê\n"
                f"   üïí –î–∞—Ç–∞: {purchase[2]}\n"
                f"   üÜî –¢–æ–≤–∞—Ä–∞: {purchase[1]}\n\n"
            )
    
    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="back_to_profile")]
    ])
    
    await callback.message.edit_text(text, reply_markup=keyboard)
    await callback.answer()

# –ò—Å—Ç–æ—Ä–∏—è –ø–æ–ø–æ–ª–Ω–µ–Ω–∏–π
@dp.callback_query(F.data == "deposit_history")
async def deposit_history(callback: types.CallbackQuery):
    user_id = callback.from_user.id
    cursor.execute("""
        SELECT 
            amount_stars,
            strftime('%d.%m.%Y %H:%M', date, 'localtime') as date
        FROM deposits 
        WHERE user_id = ? 
        ORDER BY date DESC 
        LIMIT 10
    """, (user_id,))
    
    deposits = cursor.fetchall()
    
    if not deposits:
        text = "üì≠ –£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –ø–æ–ø–æ–ª–Ω–µ–Ω–∏–π."
    else:
        text = "üìà –ò—Å—Ç–æ—Ä–∏—è –ø–æ–ø–æ–ª–Ω–µ–Ω–∏–π:\n\n"
        for i, deposit in enumerate(deposits, 1):
            text += f"{i}. +{deposit[0]}‚≠ê\n   üïí {deposit[1]}\n"
    
    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="back_to_profile")]
    ])
    
    await callback.message.edit_text(text, reply_markup=keyboard)
    await callback.answer()

# –í–æ–∑–≤—Ä–∞—Ç –≤ –ø—Ä–æ—Ñ–∏–ª—å
@dp.callback_query(F.data == "back_to_profile")
async def back_to_profile(callback: types.CallbackQuery):
    await profile(callback.message)
    await callback.answer()

# –í–æ–∑–≤—Ä–∞—Ç –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
@dp.callback_query(F.data == "back_to_main")
async def back_to_main(callback: types.CallbackQuery):
    await callback.message.answer("üîô –í–µ—Ä–Ω—É–ª–∏—Å—å –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é!", reply_markup=get_main_menu())
    await callback.answer()

# –í–æ–∑–≤—Ä–∞—Ç –≤ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å
@dp.callback_query(F.data == "back_to_admin")
async def back_to_admin(callback: types.CallbackQuery):
    await callback.message.answer("üëã –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å!", reply_markup=get_admin_menu())
    await callback.answer()

# –¢–µ—Ö–ø–æ–¥–¥–µ—Ä–∂–∫–∞
@dp.message(F.text == "üÜò –¢–µ—Ö–ø–æ–¥–¥–µ—Ä–∂–∫–∞")
async def support(message: types.Message):
    await message.answer(
        f"–ï—Å–ª–∏ —É –≤–∞—Å –≤–æ–∑–Ω–∏–∫–ª–∏ –≤–æ–ø—Ä–æ—Å—ã –∏–ª–∏ –ø—Ä–æ–±–ª–µ–º—ã, –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –≤ –Ω–∞—à—É —Ç–µ—Ö–Ω–∏—á–µ—Å–∫—É—é –ø–æ–¥–¥–µ—Ä–∂–∫—É: {SUPPORT_USERNAME}",
        reply_markup=get_main_menu()
    )

# –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
async def main():
    if not os.path.exists("products_files"):
        os.makedirs("products_files")
    
    print("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω...")
    await dp.start_polling(bot)

if __name__ == "__main__":
    asyncio.run(main())
